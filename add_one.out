sample.interval=20000
"ls" "FUN" "lapply" ".rs.objectsOnSearchPath" ".rs.getCompletionsSearchPath" "Reduce" "<Anonymous>" 
"ls" "FUN" "lapply" ".rs.objectsOnSearchPath" ".rs.getCompletionsSearchPath" "Reduce" "<Anonymous>" 
"tolower" "nchar" ".rs.startsWith" ".rs.fuzzyMatches" ".rs.getCompletionsSearchPath" "Reduce" "<Anonymous>" 
"grepl" ".rs.makeCompletions" "FUN" "lapply" "Reduce" ".rs.appendCompletions" ".rs.getCompletionsLibraryContext" "Reduce" "<Anonymous>" 
"objects" ".rs.getHelpFromObject" ".rs.getHelpFunction" "<Anonymous>" 
"lazyLoadDBfetch" "mget" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.getHelpFromObject" ".rs.getHelpFunction" "<Anonymous>" 
"lazyLoadDBfetch" "mget" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.getHelpFromObject" ".rs.getHelpFunction" "<Anonymous>" 
"lazyLoadDBfetch" "mget" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.getHelpFromObject" ".rs.getHelpFunction" "<Anonymous>" 
"lazyLoadDBfetch" "mget" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.getHelpFromObject" ".rs.getHelpFunction" "<Anonymous>" 
"lazyLoadDBfetch" "mget" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" ".rs.getHelpFromObject" ".rs.getHelpFunction" "<Anonymous>" 
"file.info" "file_test" "Rd2HTML" "tools:::httpd" "withCallingHandlers" "suppressWarnings" ".rs.getHelp" ".rs.getHelpFromObject" ".rs.getHelpFunction" "<Anonymous>" 
"unique" "simplify2array" "sapply" "RdTags" "writeContent" "writeContent" "writeSection" "Rd2HTML" "tools:::httpd" "withCallingHandlers" "suppressWarnings" ".rs.getHelp" ".rs.getHelpFromObject" ".rs.getHelpFunction" "<Anonymous>" 
"file" "readLines" "paste" "tools:::httpd" "withCallingHandlers" "suppressWarnings" ".rs.getHelp" ".rs.getHelpFromObject" ".rs.getHelpFunction" "<Anonymous>" 
"get" "getExportedValue" "::" 
"grepl" ".rs.makeCompletions" ".rs.emptyCompletions" "<Anonymous>" 
"ls" "FUN" "lapply" ".rs.objectsOnSearchPath" ".rs.getCompletionsSearchPath" "Reduce" "<Anonymous>" 
"ls" "FUN" "lapply" ".rs.objectsOnSearchPath" ".rs.getCompletionsSearchPath" "Reduce" "<Anonymous>" 
"grepl" ".rs.makeCompletions" ".rs.emptyCompletions" ".rs.getCompletionsLibraryContextArgumentNames" ".rs.appendCompletions" ".rs.getCompletionsLibraryContext" "Reduce" "<Anonymous>" 
"lapply" "FUN" "lapply" "findLocalsList1" "findLocalsList" "funEnv" "make.functionContext" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "add_one_to_vec" 
"ls" "findLocalsList1" "findLocalsList" "funEnv" "make.functionContext" "cmpfun" "doTryCatch" "tryCatchOne" "tryCatchList" "tryCatch" "compiler:::tryCmpfun" "add_one" "add_one_to_vec" 
"add_one_to_vec" 
"add_one" "add_one_to_vec" 
"add_one" "add_one_to_vec" 
"add_one" "add_one_to_vec" 
"add_one_to_vec" 
"add_one" "add_one_to_vec" 
"add_one_to_vec" 
"add_one_to_vec" 
"add_one" "add_one_to_vec" 
"add_one_to_vec" 
"add_one" "add_one_to_vec" 
"add_one" "add_one_to_vec" 
"add_one_to_vec" 
"add_one_to_vec" 
"add_one" "add_one_to_vec" 
"add_one_to_vec" 
"add_one_to_vec" 
"add_one_to_vec" 
"add_one" "add_one_to_vec" 
"add_one_to_vec" 
"add_one_to_vec" 
"add_one_to_vec" 
"add_one" "add_one_to_vec" 
"add_one" "add_one_to_vec" 
"add_one_to_vec" 
"ls" "FUN" "lapply" ".rs.objectsOnSearchPath" ".rs.getCompletionsSearchPath" "Reduce" "<Anonymous>" 
"ls" "FUN" "lapply" ".rs.objectsOnSearchPath" ".rs.getCompletionsSearchPath" "Reduce" "<Anonymous>" 
"tolower" "nchar" ".rs.startsWith" ".rs.fuzzyMatches" ".rs.getCompletionsSearchPath" "Reduce" "<Anonymous>" 
"tolower" "nchar" ".rs.startsWith" ".rs.fuzzyMatches" "FUN" "lapply" "Reduce" ".rs.appendCompletions" ".rs.getCompletionsLibraryContext" "Reduce" "<Anonymous>" 
"getExportedValue" "::" "eval" "eval" "withVisible" "evalVis" "capture.output" ".rs.resolveObjectFromFunctionCall" ".rs.getCompletionsFunction" ".rs.appendCompletions" ".rs.getRCompletions" ".rs.appendCompletions" "<Anonymous>" 
"ls" "FUN" "lapply" ".rs.objectsOnSearchPath" ".rs.getCompletionsSearchPath" "Reduce" "<Anonymous>" 
".Call" ".rs.getInferredCompletions" ".rs.getCompletionsLibraryContext" "Reduce" "<Anonymous>" 
